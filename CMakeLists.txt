# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-m32 ")

set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-m32 ")

# Variables
set(PORTAL2_DIR "D:/SteamLibrary/steamapps/common/Portal 2")

project(photon
	LANGUAGES
		C
		CXX
	DESCRIPTION
		"Photon is a mod loader for Portal 2."
)

# Target: subhook
set(subhook_SOURCES
	cmake.toml
	"vendor/subhook/subhook.c"
	"vendor/subhook/subhook.h"
)

add_library(subhook STATIC)

target_sources(subhook PRIVATE ${subhook_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${subhook_SOURCES})

add_library(Zeex::subhook ALIAS subhook)
if(MSVC) # msvc
	target_compile_definitions(subhook PUBLIC
		SUBHOOK_STATIC
	)
endif()

if(MSVC) # msvc
	target_compile_options(subhook PUBLIC
		"/MP"
	)
endif()

# Target: lodepng
set(lodepng_SOURCES
	cmake.toml
	"vendor/lodepng/lodepng.cpp"
	"vendor/lodepng/lodepng.h"
)

add_library(lodepng STATIC)

target_sources(lodepng PRIVATE ${lodepng_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${lodepng_SOURCES})

add_library(lvandeve::lodepng ALIAS lodepng)
if(MSVC) # msvc
	target_compile_options(lodepng PUBLIC
		"/MP"
	)
endif()

# Target: photon
set(photon_SOURCES
	cmake.toml
	"src/core/configs/configs.cpp"
	"src/core/configs/configs.h"
	"src/core/convars/convars.cpp"
	"src/core/convars/convars.h"
	"src/core/huds/huds.cpp"
	"src/core/huds/huds.h"
	"src/core/interfaces/interfaces.cpp"
	"src/core/interfaces/interfaces.h"
	"src/core/menu/framework.cpp"
	"src/core/menu/framework.h"
	"src/core/menu/gui.cpp"
	"src/core/menu/gui.h"
	"src/core/mods/mods.cpp"
	"src/core/mods/mods.h"
	"src/core/photon.cpp"
	"src/core/photon.h"
	"src/core/shared/ccon.cpp"
	"src/core/shared/common.cpp"
	"src/core/shared/config.cpp"
	"src/core/shared/hud.cpp"
	"src/core/shared/input.cpp"
	"src/core/shared/menu.cpp"
	"src/core/shared/render.cpp"
	"src/core/shared/signal.cpp"
	"src/core/signals/signals.cpp"
	"src/core/signals/signals.h"
	"src/sdk/ccon.h"
	"src/sdk/common.h"
	"src/sdk/config.h"
	"src/sdk/hud.h"
	"src/sdk/input.h"
	"src/sdk/menu.h"
	"src/sdk/photon.h"
	"src/sdk/platform.h"
	"src/sdk/render.h"
	"src/sdk/signal.h"
	"src/sdk/source-sdk/color.h"
	"src/sdk/source-sdk/convar.h"
	"src/sdk/source-sdk/misc.h"
	"src/sdk/source-sdk/utlvector.h"
	"src/sdk/source-sdk/vector.h"
	"src/sdk/source_sdk.h"
	"src/source-sdk/interfaces.h"
	"src/source-sdk/interfaces/command_line.h"
	"src/source-sdk/interfaces/console.h"
	"src/source-sdk/interfaces/cvar.h"
	"src/source-sdk/interfaces/engine_client.h"
	"src/source-sdk/interfaces/entity_list.h"
	"src/source-sdk/interfaces/font_manager.h"
	"src/source-sdk/interfaces/game_rules.h"
	"src/source-sdk/interfaces/input_system.h"
	"src/source-sdk/interfaces/mem_alloc.h"
	"src/source-sdk/interfaces/scheme.h"
	"src/source-sdk/interfaces/surface.h"
	"src/source-sdk/plugin.cpp"
	"src/source-sdk/plugin.h"
	"src/util/address.h"
	"src/util/math.h"
	"src/util/util.cpp"
	"src/util/util.h"
)

add_library(photon SHARED)

target_sources(photon PRIVATE ${photon_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${photon_SOURCES})

target_compile_definitions(photon PUBLIC
	NOMINMAX
)

if(MSVC) # msvc
	target_compile_definitions(photon PUBLIC
		SUBHOOK_STATIC
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_definitions(photon PUBLIC
		_GNU_SOURCE
	)
endif()

target_compile_features(photon PUBLIC
	cxx_std_20
)

if(MSVC) # msvc
	target_compile_options(photon PUBLIC
		"/MP"
		"/Zc:preprocessor"
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(photon PUBLIC
		-fPIC
		-fpermissive
	)
endif()

target_include_directories(photon PUBLIC
	src
	vendor
	"vendor/json/single_include"
)

target_link_libraries(photon PUBLIC
	Zeex::subhook
	lvandeve::lodepng
)

# Target: example-mod
set(example-mod_SOURCES
	cmake.toml
	"example-mod/config/config.cpp"
	"example-mod/config/config.h"
	"example-mod/convars/convars.cpp"
	"example-mod/convars/convars.h"
	"example-mod/huds/hud.cpp"
	"example-mod/huds/hud.h"
	"example-mod/mod.cpp"
	"example-mod/mod.h"
	"example-mod/signals/signals.cpp"
	"example-mod/signals/signals.h"
)

add_library(example-mod SHARED)

target_sources(example-mod PRIVATE ${example-mod_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example-mod_SOURCES})

target_compile_definitions(example-mod PUBLIC
	NOMINMAX
)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_definitions(example-mod PUBLIC
		_GNU_SOURCE
	)
endif()

target_compile_features(example-mod PUBLIC
	cxx_std_20
)

if(MSVC) # msvc
	target_compile_options(example-mod PUBLIC
		"/MP"
		"/Zc:preprocessor"
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(example-mod PUBLIC
		-fPIC
		-fpermissive
	)
endif()

target_include_directories(example-mod PUBLIC
	example-mod
	"src/sdk"
)

install(
	TARGETS
		photon
	DESTINATION
		${PORTAL2_DIR}
	COMPONENT
		photon
)
install(
	TARGETS
		example-mod
	DESTINATION
		"${PORTAL2_DIR}/photon"
	COMPONENT
		example-mod
)
